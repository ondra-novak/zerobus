#pragma once

#include <string_view>

template<typename ... Fn>
class LongString: public std::string_view {
public:
    static constexpr std::size_t total_sz = (0+...+Fn()().size());

    constexpr LongString(Fn ... fns):std::string_view(data, total_sz) {
        char *iter = data;
        auto write = [&](char * &iter, auto x) {
            iter = std::copy(x.begin(), x.end(), iter);
        };
        (..., write(iter, fns()));
    }
protected:
    char data[total_sz] = {};

};

constexpr LongString client_embedded_js(
        []()->std::string_view{return R"javascript(@JS_CONTENT1@)javascript";},
        //split at 16KB
        []()->std::string_view{return R"javascript(@JS_CONTENT2@)javascript";});

constexpr std::string_view client_embedded_html = R"(@HTML_CONTENT@)";

